
#!/bin/bash

# Set variables
SONARQUBE_URL="http://your-sonarqube-instance"
SONARQUBE_API_TOKEN="your-sonarqube-api-token"
TARGET_USER="target-sonarqube-user"
SONARQUBE_TOKEN_NAME="your-token-name"

# Function to create a SonarQube token for another user
create_sonar_token() {
  curl -s -u "${SONARQUBE_API_TOKEN}:" -X POST "${SONARQUBE_URL}/api/user_tokens/generate" -d "name=${SONARQUBE_TOKEN_NAME}" -d "login=${TARGET_USER}" | jq -r .token
}

# Function to check if a SonarQube token for another user exists and delete it if it does
delete_sonar_token_if_exists() {
  local token_exists=$(curl -s -u "${SONARQUBE_API_TOKEN}:" -X GET "${SONARQUBE_URL}/api/user_tokens/search" -d "login=${TARGET_USER}" | jq -r --arg TOKEN_NAME "${SONARQUBE_TOKEN_NAME}" '.userTokens[] | select(.name==$TOKEN_NAME) | .name')
  
  if [[ ! -z "$token_exists" ]]; then
    curl -s -u "${SONARQUBE_API_TOKEN}:" -X POST "${SONARQUBE_URL}/api/user_tokens/revoke" -d "name=${SONARQUBE_TOKEN_NAME}" -d "login=${TARGET_USER}"
  fi
}

# Main script
delete_sonar_token_if_exists
sonar_token=$(create_sonar_token)

echo "New SonarQube token for user ${TARGET_USER} has been created successfully: ${sonar_token}"
