
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.List;
import java.util.ArrayList;

public class SonarQubeGroupAndUserManagement {
    public static void main(String[] args) {
        String sonarqubeUrl = "https://sonarqube.example.com";
        String adminToken = "your_admin_token"; // Your SonarQube admin token
        String groupName = "new_group_name"; // The name for the new group
        List<String> userLogins = new ArrayList<>();
        userLogins.add("external_user1"); // External user's login
        userLogins.add("external_user2"); // Another external user's login

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            // Check if group exists, if not create it
            if (!groupExists(httpClient, sonarqubeUrl, adminToken, groupName)) {
                createGroup(httpClient, sonarqubeUrl, adminToken, groupName);
            } else {
                System.out.println("Group already exists: " + groupName);
            }

            // Add users to the group if they exist
            for (String userLogin : userLogins) {
                if (userExists(httpClient, sonarqubeUrl, adminToken, userLogin)) {
                    addUserToGroup(httpClient, sonarqubeUrl, adminToken, groupName, userLogin);
                } else {
                    System.out.println("User " + userLogin + " does not exist.");
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static boolean groupExists(CloseableHttpClient httpClient, String sonarqubeUrl, String adminToken, String groupName) throws IOException {
        String checkGroupUrl = sonarqubeUrl + "/api/user_groups/search?f=name&q=" + URLEncoder.encode(groupName, StandardCharsets.UTF_8);
        String authHeader = "Basic " + Base64.getEncoder().encodeToString((adminToken + ":").getBytes(StandardCharsets.UTF_8));

        HttpGet request = new HttpGet(checkGroupUrl);
        request.setHeader("Authorization", authHeader);

        HttpResponse response = httpClient.execute(request);
        String responseBody = EntityUtils.toString(response.getEntity());
        JSONObject jsonResponse = new JSONObject(responseBody);
        JSONArray groups = jsonResponse.getJSONArray("groups");

        for (int i = 0; i < groups.length(); i++) {
            if (groups.getJSONObject(i).getString("name").equals(groupName)) {
                return true;
            }
        }
        return false;
    }

    private static void createGroup(CloseableHttpClient httpClient, String sonarqubeUrl, String adminToken, String groupName) throws IOException {
        String createGroupUrl = sonarqubeUrl + "/api/user_groups/create";
        String authHeader = "Basic " + Base64.getEncoder().encodeToString((adminToken + ":").getBytes(StandardCharsets.UTF_8));
        String payload = String.format("name=%s", URLEncoder.encode(groupName, StandardCharsets.UTF_8));

        HttpPost request = new HttpPost(createGroupUrl);
        request.setHeader("Authorization", authHeader);
        request.setHeader("Content-Type", "application/x-www-form-urlencoded");
        request.setEntity(new StringEntity(payload));

        HttpResponse response = httpClient.execute(request);
        if (response.getStatusLine().getStatusCode() != 200) {
            System.out.println("Failed to create group: " + EntityUtils.toString(response.getEntity()));
        } else {
            System.out.println("Group created successfully: " + groupName);
        }
    }

    private static boolean userExists(CloseableHttpClient httpClient, String sonarqubeUrl, String adminToken, String userLogin) throws IOException {
        String checkUserUrl = sonarqubeUrl + "/api/users/search?q=" + URLEncoder.encode(userLogin, StandardCharsets.UTF_8);
        String authHeader = "Basic " + Base64.getEncoder().encodeToString((adminToken + ":").getBytes(StandardCharsets.UTF_8));

        HttpGet request = new HttpGet(checkUserUrl);
        request.setHeader("Authorization", authHeader);

        HttpResponse response = httpClient.execute(request);
        String responseBody = EntityUtils.toString(response.getEntity());
        JSONObject jsonResponse = new JSONObject(responseBody);
        JSONArray users = jsonResponse.getJSONArray("users");

        for (int i = 0; i < users.length(); i++) {
            if (users.getJSONObject(i).getString("login").equals(userLogin)) {
                return true;
            }
        }
        return false;
    }

    private static void addUserToGroup(CloseableHttpClient httpClient, String sonarqubeUrl, String adminToken, String groupName, String userLogin) throws IOException {
        String addUserUrl = sonarqubeUrl + "/api/user_groups/add_user";
        String authHeader = "Basic " + Base64.getEncoder().encodeToString((adminToken + ":").getBytes(StandardCharsets.UTF_8));
        String payload = String.format("name=%s&login=%s",
                URLEncoder.encode(groupName, StandardCharsets.UTF_8),
                URLEncoder.encode(userLogin, StandardCharsets.UTF_8));

        HttpPost request = new HttpPost(addUserUrl);
        request.setHeader("Authorization", authHeader);
        request.setHeader("Content-Type", "application/x-www-form-urlencoded");
        request.setEntity(new StringEntity(payload));

        HttpResponse response = httpClient.execute(request);
        if (response.getStatusLine().getStatusCode() != 200) {
            System.out.println("Failed to add user to group: " + EntityUtils.toString(response.getEntity()));
        } else {
            System.out.println("User " + userLogin + " added to group " + groupName);
        }
    }
}
