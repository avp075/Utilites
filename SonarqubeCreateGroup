import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.io.IOException;

public class SonarQubeGroupManagement {
    public static void main(String[] args) {
        String listGroupsUrl = "https://sonarqube.example.com/api/user_groups/search";
        String createGroupUrl = "https://sonarqube.example.com/api/user_groups/create";
        String listUsersUrl = "https://sonarqube.example.com/api/users/search";
        String listGroupUsersUrl = "https://sonarqube.example.com/api/user_groups/users";
        String addUserToGroupUrl = "https://sonarqube.example.com/api/user_groups/add_user";
        String token = "your_sonarqube_token"; // Token for authentication

        // Parameters
        String groupName = "NewGroup";
        String[] ldapUserExternalIds = {"external_id_1", "external_id_2"}; // LDAP users' external IDs

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            // Check if the group already exists
            if (groupExists(httpClient, listGroupsUrl, token, groupName)) {
                System.out.println("Group already exists.");
            } else {
                createGroup(httpClient, createGroupUrl, token, groupName);
            }

            // Add users to the group
            for (String externalId : ldapUserExternalIds) {
                if (userExists(httpClient, listUsersUrl, token, externalId)) {
                    if (userAlreadyInGroup(httpClient, listGroupUsersUrl, token, groupName, externalId)) {
                        System.out.println("User with external ID " + externalId + " is already in the group " + groupName + ".");
                    } else {
                        addUserToGroup(httpClient, addUserToGroupUrl, token, groupName, externalId);
                    }
                } else {
                    System.out.println("User with external ID " + externalId + " does not exist.");
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static boolean groupExists(CloseableHttpClient httpClient, String listGroupsUrl, String token, String groupName) throws IOException {
        String encodedAuth = Base64.getEncoder().encodeToString((token + ":").getBytes());
        String authHeader = "Basic " + encodedAuth;

        HttpGet request = new HttpGet(listGroupsUrl);
        request.setHeader("Authorization", authHeader);

        HttpResponse response = httpClient.execute(request);

        if (response.getStatusLine().getStatusCode() != 200) {
            throw new IOException("Failed to list groups: " + EntityUtils.toString(response.getEntity()));
        }

        String responseBody = EntityUtils.toString(response.getEntity());
        JSONObject jsonResponse = new JSONObject(responseBody);
        JSONArray groups = jsonResponse.getJSONArray("groups");

        for (int i = 0; i < groups.length(); i++) {
            JSONObject group = groups.getJSONObject(i);
            if (groupName.equals(group.getString("name"))) {
                return true;
            }
        }

        return false;
    }

    private static void createGroup(CloseableHttpClient httpClient, String createGroupUrl, String token, String groupName) throws IOException {
        String payload = String.format("name=%s",
                URLEncoder.encode(groupName, StandardCharsets.UTF_8));

        String encodedAuth = Base64.getEncoder().encodeToString((token + ":").getBytes());
        String authHeader = "Basic " + encodedAuth;

        HttpPost request = new HttpPost(createGroupUrl);
        request.setHeader("Authorization", authHeader);
        request.setHeader("Content-Type", "application/x-www-form-urlencoded");
        request.setEntity(new StringEntity(payload));

        HttpResponse response = httpClient.execute(request);

        System.out.println("Response Code: " + response.getStatusLine().getStatusCode());
        String responseBody = EntityUtils.toString(response.getEntity());
        System.out.println("Response: " + responseBody);
    }

    private static boolean userExists(CloseableHttpClient httpClient, String listUsersUrl, String token, String externalId) throws IOException {
        String encodedAuth = Base64.getEncoder().encodeToString((token + ":").getBytes());
        String authHeader = "Basic " + encodedAuth;

        HttpGet request = new HttpGet(listUsersUrl + "?q=" + URLEncoder.encode(externalId, StandardCharsets.UTF_8) + "&externalProvider=ldap");
        request.setHeader("Authorization", authHeader);

        HttpResponse response = httpClient.execute(request);

        if (response.getStatusLine().getStatusCode() != 200) {
            throw new IOException("Failed to list users: " + EntityUtils.toString(response.getEntity()));
        }

        String responseBody = EntityUtils.toString(response.getEntity());
        JSONObject jsonResponse = new JSONObject(responseBody);
        JSONArray users = jsonResponse.getJSONArray("users");

        for (int i = 0; i < users.length(); i++) {
            JSONObject user = users.getJSONObject(i);
            if (externalId.equals(user.getString("externalIdentity"))) {
                return true;
            }
        }

        return false;
    }

    private static boolean userAlreadyInGroup(CloseableHttpClient httpClient, String listGroupUsersUrl, String token, String groupName, String externalId) throws IOException {
        String encodedAuth = Base64.getEncoder().encodeToString((token + ":").getBytes());
        String authHeader = "Basic " + encodedAuth;

        HttpGet request = new HttpGet(listGroupUsersUrl + "?name=" + URLEncoder.encode(groupName, StandardCharsets.UTF_8));
        request.setHeader("Authorization", authHeader);

        HttpResponse response = httpClient.execute(request);

        if (response.getStatusLine().getStatusCode() != 200) {
            throw new IOException("Failed to list group users: " + EntityUtils.toString(response.getEntity()));
        }

        String responseBody = EntityUtils.toString(response.getEntity());
        JSONObject jsonResponse = new JSONObject(responseBody);
        JSONArray users = jsonResponse.getJSONArray("users");

        for (int i = 0; i < users.length(); i++) {
            JSONObject user = users.getJSONObject(i);
            if (externalId.equals(user.getString("externalIdentity"))) {
                return true;
            }
        }

        return false;
    }

    private static void addUserToGroup(CloseableHttpClient httpClient, String addUserToGroupUrl, String token, String groupName, String externalId) throws IOException {
        String payload = String.format("name=%s&login=%s&provider=ldap",
                URLEncoder.encode(groupName, StandardCharsets.UTF_8),
                URLEncoder.encode(externalId, StandardCharsets.UTF_8));

        String encodedAuth = Base64.getEncoder().encodeToString((token + ":").getBytes());
        String authHeader = "Basic " + encodedAuth;

        HttpPost request = new HttpPost(addUserToGroupUrl);
        request.setHeader("Authorization", authHeader);
        request.setHeader("Content-Type", "application/x-www-form-urlencoded");
        request.setEntity(new StringEntity(payload));

        HttpResponse response = httpClient.execute(request);

        System.out.println("Response Code: " + response.getStatusLine().getStatusCode());
        String responseBody = EntityUtils.toString(response.getEntity());
        System.out.println("Response: " + responseBody);
    }
}
