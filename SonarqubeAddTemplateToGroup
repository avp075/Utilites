
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.io.IOException;


public class SonarQubePermissionTemplateManagement {
    public static void main(String[] args) {
        String listGroupsUrl = "https://sonarqube.example.com/api/user_groups/search";
        String listTemplatesUrl = "https://sonarqube.example.com/api/permissions/search_templates";
        String addTemplateToGroupUrl = "https://sonarqube.example.com/api/permissions/add_group_to_template";
        String token = "your_sonarqube_token"; // Token for authentication

        // Parameters
        String groupName = "NewGroup";
        String templateName = "NewTemplate";
        String permission = "admin"; // Example permission

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            // Check if the group exists
            if (!groupExists(httpClient, listGroupsUrl, token, groupName)) {
                System.out.println("Group does not exist.");
                return;
            }

            // Check if the template exists
            if (!templateExists(httpClient, listTemplatesUrl, token, templateName)) {
                System.out.println("Template does not exist.");
                return;
            }

            // Add permission template to group
            addTemplateToGroup(httpClient, addTemplateToGroupUrl, token, groupName, templateName, permission);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static boolean groupExists(CloseableHttpClient httpClient, String listGroupsUrl, String token, String groupName) throws IOException {
        String encodedAuth = Base64.getEncoder().encodeToString((token + ":").getBytes());
        String authHeader = "Basic " + encodedAuth;

        HttpGet request = new HttpGet(listGroupsUrl);
        request.setHeader("Authorization", authHeader);

        HttpResponse response = httpClient.execute(request);

        if (response.getStatusLine().getStatusCode() != 200) {
            throw new IOException("Failed to list groups: " + EntityUtils.toString(response.getEntity()));
        }

        String responseBody = EntityUtils.toString(response.getEntity());
        JSONObject jsonResponse = new JSONObject(responseBody);
        JSONArray groups = jsonResponse.getJSONArray("groups");

        for (int i = 0; i < groups.length(); i++) {
            JSONObject group = groups.getJSONObject(i);
            if (groupName.equals(group.getString("name"))) {
                return true;
            }
        }

        return false;
    }

    private static boolean templateExists(CloseableHttpClient httpClient, String listTemplatesUrl, String token, String templateName) throws IOException {
        String encodedAuth = Base64.getEncoder().encodeToString((token + ":").getBytes());
        String authHeader = "Basic " + encodedAuth;

        HttpGet request = new HttpGet(listTemplatesUrl);
        request.setHeader("Authorization", authHeader);

        HttpResponse response = httpClient.execute(request);

        if (response.getStatusLine().getStatusCode() != 200) {
            throw new IOException("Failed to list templates: " + EntityUtils.toString(response.getEntity()));
        }

        String responseBody = EntityUtils.toString(response.getEntity());
        JSONObject jsonResponse = new JSONObject(responseBody);
        JSONArray templates = jsonResponse.getJSONArray("permissionTemplates");

        for (int i = 0; i < templates.length(); i++) {
            JSONObject template = templates.getJSONObject(i);
            if (templateName.equals(template.getString("name"))) {
                return true;
            }
        }

        return false;
    }

    private static void addTemplateToGroup(CloseableHttpClient httpClient, String addTemplateToGroupUrl, String token, String groupName, String templateName, String permission) throws IOException {
        String payload = String.format("groupName=%s&templateName=%s&permission=%s",
                URLEncoder.encode(groupName, StandardCharsets.UTF_8),
                URLEncoder.encode(templateName, StandardCharsets.UTF_8),
                URLEncoder.encode(permission, StandardCharsets.UTF_8));

        String encodedAuth = Base64.getEncoder().encodeToString((token + ":").getBytes());
        String authHeader = "Basic " + encodedAuth;

        HttpPost request = new HttpPost(addTemplateToGroupUrl);
        request.setHeader("Authorization", authHeader);
        request.setHeader("Content-Type", "application/x-www-form-urlencoded");
        request.setEntity(new StringEntity(payload));

        HttpResponse response = httpClient.execute(request);

        System.out.println("Response Code: " + response.getStatusLine().getStatusCode());
        String responseBody = EntityUtils.toString(response.getEntity());
        System.out.println("Response: " + responseBody);
    }
}
